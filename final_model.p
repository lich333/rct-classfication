{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "diagnosis_of_rct.ipynb",
      "provenance": [],
      "mount_file_id": "1Sz8RjKv3ZhNnky3WM1TlnZMT0fFjbQcH",
      "authorship_tag": "ABX9TyNjbtJgxza16i9G6PP0Mwe5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lich333/rct-classfication/blob/main/final_model.p\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oE4ZM0K8vd7f",
        "outputId": "1ab18be0-4401-447f-acae-8dc765b367ea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "prAumTtnwWjt"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv(\"/content/drive/MyDrive/rct_machinelearning/lcc.csv\",header=None)\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "MQbX0wIewg1M",
        "outputId": "c0a9d99c-96b6-4502-d770-ec9e35162ac7"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      0       1     2   3     4   5    6      7      8     9   ...   15   16  \\\n",
              "0  10009  Female  70.0   0   6.0   7  0.0   90.0   90.0   0.0  ...  3.0  4.0   \n",
              "1  10010  Female  59.0   0   NaN   0  1.0  170.0   60.0  60.0  ...  4.0  4.0   \n",
              "2  10031  Female  53.0   0   NaN   6  1.0  100.0   90.0  60.0  ...  5.0  5.0   \n",
              "3  10045  Female  61.0   0   NaN   1  1.0  180.0  180.0  60.0  ...  5.0  5.0   \n",
              "4  10050  Female  50.0   0  10.0   4  NaN   90.0   90.0  60.0  ...  4.0  5.0   \n",
              "\n",
              "    17    18    19    20    21   22  23  24  \n",
              "0  3.0  55.0  32.0  46.0  20.0  1.0   1 NaN  \n",
              "1  4.0  75.0   2.0  75.0  31.0  9.0   1 NaN  \n",
              "2  4.0   NaN   NaN   NaN   NaN  NaN   1 NaN  \n",
              "3  5.0  82.0  11.0  78.0  24.0  7.0   1 NaN  \n",
              "4  4.0   NaN   NaN   NaN   NaN  NaN   1 NaN  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3987f5f-9a5d-49a7-bea7-b380a37ca81e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>15</th>\n",
              "      <th>16</th>\n",
              "      <th>17</th>\n",
              "      <th>18</th>\n",
              "      <th>19</th>\n",
              "      <th>20</th>\n",
              "      <th>21</th>\n",
              "      <th>22</th>\n",
              "      <th>23</th>\n",
              "      <th>24</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10009</td>\n",
              "      <td>Female</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>46.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10010</td>\n",
              "      <td>Female</td>\n",
              "      <td>59.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10031</td>\n",
              "      <td>Female</td>\n",
              "      <td>53.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10045</td>\n",
              "      <td>Female</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10050</td>\n",
              "      <td>Female</td>\n",
              "      <td>50.0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>90.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3987f5f-9a5d-49a7-bea7-b380a37ca81e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a3987f5f-9a5d-49a7-bea7-b380a37ca81e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a3987f5f-9a5d-49a7-bea7-b380a37ca81e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.sample(frac=1)\n"
      ],
      "metadata": {
        "id": "DE4qFpH479x5"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "columns = ['ID','Sex' , 'Age' ,'Dominant side operated' ,'vas' , 'Time','Trauma-related','Flex' , 'Abd' , 'ER' , 'IR' , 'Jobe' , 'Bear hug' ,'Belly press' ,'ERLS' ,  'SS','IS','SSC','ASES' , 'Quick-DASH' ,'Constant-Murley','UCLA','SST' , 'classier','we']"
      ],
      "metadata": {
        "id": "19iJDBGF8cCs"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "list1 = np.arange(25)\n",
        "list1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hBESZYrW8lnT",
        "outputId": "5d840136-8cd2-4dfa-c1a1-cd66dbc768da"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
              "       17, 18, 19, 20, 21, 22, 23, 24])"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dict1 = dict(zip(list1,columns))\n",
        "data = data.rename(columns=dict1)"
      ],
      "metadata": {
        "id": "d5M_houk8p8_"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['IR'] = data['IR'].replace(to_replace=['thi','butt','S 1','L5','L 3','L 1','T 11','T 9','T 7','T 5','T 3'],value=[0,1,2,3,4,5,6,7,8,9,10])\n",
        "data['Sex'] = data['Sex'].replace(to_replace=['Male','Female',],value=[0,1])"
      ],
      "metadata": {
        "id": "KBFPQmDt8y3m"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Trauma-related'] = data['Trauma-related'].fillna(value= 0)"
      ],
      "metadata": {
        "id": "drroWaCN88x8"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.drop(['we'], axis=1)"
      ],
      "metadata": {
        "id": "f3RAN6B19DOK"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1 = data\n",
        "data1.set_index('ID',inplace=True)\n",
        "data1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 534
        },
        "id": "btVVRQgS9Eex",
        "outputId": "656ef56e-3023-4395-d304-0057cee916ab"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Sex   Age  Dominant side operated  vas  Time  Trauma-related   Flex  \\\n",
              "ID                                                                           \n",
              "12328    1  59.0                       1  NaN     5             1.0  100.0   \n",
              "10885    1  67.0                       0  7.0    37             0.0  170.0   \n",
              "12028    0  21.0                       0  0.0    12             1.0  180.0   \n",
              "10063    1  63.0                       0  4.0     6             0.0  180.0   \n",
              "10412    0  52.0                       1  2.0     0             0.0  150.0   \n",
              "...    ...   ...                     ...  ...   ...             ...    ...   \n",
              "10762    0  47.0                       0  3.0     3             1.0  100.0   \n",
              "11592    1  50.0                       1  3.0     0             1.0  170.0   \n",
              "12243    1  63.0                       1  8.0     6             0.0  110.0   \n",
              "11921    0  49.0                       0  1.0     2             0.0  140.0   \n",
              "11210    0  54.0                       1  2.0     4             0.0  180.0   \n",
              "\n",
              "         Abd    ER   IR  ...  ERLS   SS   IS  SSC  ASES  Quick-DASH  \\\n",
              "ID                       ...                                          \n",
              "12328   90.0  10.0  1.0  ...   1.0  4.0  4.0  4.0  40.0        30.0   \n",
              "10885  160.0  50.0  6.0  ...   0.0  4.0  4.0  4.0   NaN         NaN   \n",
              "12028  180.0  80.0  8.0  ...   0.0  5.0  5.0  5.0  93.0         9.0   \n",
              "10063  180.0  80.0  5.0  ...   0.0  4.0  5.0  5.0   NaN         NaN   \n",
              "10412   90.0  60.0  4.0  ...   0.0  3.0  4.0  4.0  78.0        14.0   \n",
              "...      ...   ...  ...  ...   ...  ...  ...  ...   ...         ...   \n",
              "10762   90.0  20.0  1.0  ...   1.0  4.0  4.0  4.0   NaN         NaN   \n",
              "11592  170.0  60.0  8.0  ...   0.0  4.0  4.0  4.0  68.0        16.0   \n",
              "12243  110.0  10.0  0.0  ...   0.0  3.0  4.0  4.0  23.0        66.0   \n",
              "11921  140.0  30.0  3.0  ...   0.0  5.0  5.0  4.0  70.0        39.0   \n",
              "11210  180.0  70.0  4.0  ...   0.0  4.0  5.0  5.0   NaN         NaN   \n",
              "\n",
              "       Constant-Murley  UCLA   SST  classier  \n",
              "ID                                            \n",
              "12328             50.0  17.0   4.0         0  \n",
              "10885              NaN   NaN   NaN         0  \n",
              "12028             96.0  33.0  12.0         0  \n",
              "10063              NaN   NaN   NaN         0  \n",
              "10412             70.0  30.0  11.0         1  \n",
              "...                ...   ...   ...       ...  \n",
              "10762              NaN   NaN   NaN         0  \n",
              "11592             80.0  25.0   6.0         0  \n",
              "12243             41.0  12.0   1.0         0  \n",
              "11921             63.0  14.0   2.0         1  \n",
              "11210              NaN   NaN   NaN         0  \n",
              "\n",
              "[1945 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b122a931-80f8-4aa3-85bd-856591c8f128\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Dominant side operated</th>\n",
              "      <th>vas</th>\n",
              "      <th>Time</th>\n",
              "      <th>Trauma-related</th>\n",
              "      <th>Flex</th>\n",
              "      <th>Abd</th>\n",
              "      <th>ER</th>\n",
              "      <th>IR</th>\n",
              "      <th>...</th>\n",
              "      <th>ERLS</th>\n",
              "      <th>SS</th>\n",
              "      <th>IS</th>\n",
              "      <th>SSC</th>\n",
              "      <th>ASES</th>\n",
              "      <th>Quick-DASH</th>\n",
              "      <th>Constant-Murley</th>\n",
              "      <th>UCLA</th>\n",
              "      <th>SST</th>\n",
              "      <th>classier</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12328</th>\n",
              "      <td>1</td>\n",
              "      <td>59.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10885</th>\n",
              "      <td>1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>37</td>\n",
              "      <td>0.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12028</th>\n",
              "      <td>0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12</td>\n",
              "      <td>1.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>93.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10063</th>\n",
              "      <td>1</td>\n",
              "      <td>63.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10412</th>\n",
              "      <td>0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10762</th>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11592</th>\n",
              "      <td>1</td>\n",
              "      <td>50.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12243</th>\n",
              "      <td>1</td>\n",
              "      <td>63.0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11921</th>\n",
              "      <td>0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11210</th>\n",
              "      <td>0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1945 rows × 23 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b122a931-80f8-4aa3-85bd-856591c8f128')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b122a931-80f8-4aa3-85bd-856591c8f128 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b122a931-80f8-4aa3-85bd-856591c8f128');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_ = data1.copy()\n",
        "data_B = data_[data_['classier'] == 1]\n",
        "data_C = data_[data_['classier'] == 0]"
      ],
      "metadata": {
        "id": "S7wEhDky9Qpq"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_B = data_B.fillna(value = data_B.mean())\n",
        "# data_B.info()\n",
        "data_C = data_C.fillna(value = data_C.mean())\n",
        "# data_C.info()\n",
        "data_ = pd.concat((data_C,data_B))\n",
        "data_.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qDBg5wjJ9nU5",
        "outputId": "dc37fb63-9b12-45a1-e9ae-5704bcb8b63d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 1945 entries, 12328 to 11921\n",
            "Data columns (total 23 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   Sex                     1945 non-null   int64  \n",
            " 1   Age                     1945 non-null   float64\n",
            " 2   Dominant side operated  1945 non-null   int64  \n",
            " 3   vas                     1945 non-null   float64\n",
            " 4   Time                    1945 non-null   int64  \n",
            " 5   Trauma-related          1945 non-null   float64\n",
            " 6   Flex                    1945 non-null   float64\n",
            " 7   Abd                     1945 non-null   float64\n",
            " 8   ER                      1945 non-null   float64\n",
            " 9   IR                      1945 non-null   float64\n",
            " 10  Jobe                    1945 non-null   float64\n",
            " 11  Bear hug                1945 non-null   float64\n",
            " 12  Belly press             1945 non-null   float64\n",
            " 13  ERLS                    1945 non-null   float64\n",
            " 14  SS                      1945 non-null   float64\n",
            " 15  IS                      1945 non-null   float64\n",
            " 16  SSC                     1945 non-null   float64\n",
            " 17  ASES                    1945 non-null   float64\n",
            " 18  Quick-DASH              1945 non-null   float64\n",
            " 19  Constant-Murley         1945 non-null   float64\n",
            " 20  UCLA                    1945 non-null   float64\n",
            " 21  SST                     1945 non-null   float64\n",
            " 22  classier                1945 non-null   int64  \n",
            "dtypes: float64(19), int64(4)\n",
            "memory usage: 364.7 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cc = [-1,45,90,135,190]\n",
        "aa = [-1,45,90,135,190]\n",
        "bb = [-1,20,40,60,90]\n",
        "dd = [-1,5,8,11]\n",
        "ee = [-10,3,7,11]\n",
        "ff = [-10,3,6,12,1000]\n",
        "\n",
        "flexlabels = ['a','b','c','d']\n",
        "abdlabels = ['e','f','g','h']\n",
        "erlabels = ['i','j','k','l']\n",
        "irlables = ['q','w','e']\n",
        "vaslables = ['q','w','e']\n",
        "timelables = ['q','w','e','r']\n",
        "\n",
        "pd.cut(data_['Flex'],cc,labels=flexlabels)\n",
        "pd.cut(data_['Abd'],aa,labels=abdlabels)\n",
        "pd.cut(data_['ER'],bb,labels=erlabels)\n",
        "pd.cut(data_['IR'],dd,labels=irlables)\n",
        "pd.cut(data_['vas'],ee,labels=vaslables)\n",
        "pd.cut(data_['Time'],ff,labels=timelables)\n",
        "\n",
        "data_['Flexion'] = pd.cut(data_['Flex'],cc,labels=flexlabels)\n",
        "data_['Abduction'] = pd.cut(data_['Abd'],aa,labels=abdlabels)\n",
        "data_['External rotation'] = pd.cut(data_['ER'],bb,labels=erlabels)\n",
        "data_['Internal rotation'] = pd.cut(data_['IR'],dd,labels=irlables)\n",
        "data_['VAS'] = pd.cut(data_['vas'],ee,labels=vaslables)\n",
        "data_['Duration of symptoms'] = pd.cut(data_['Time'],ff,labels=timelables)\n",
        "\n",
        "data_['Flexion'] = data_['Flexion'].replace(to_replace=['a','b','c','d'],value=[0,1,2,3])\n",
        "data_['Abduction'] = data_['Abduction'].replace(to_replace=['e','f','g','h'],value=[0,1,2,3])\n",
        "data_['External rotation'] = data_['External rotation'].replace(to_replace=['i','j','k','l'],value=[0,1,2,3])\n",
        "data_['Internal rotation'] = data_['Internal rotation'].replace(to_replace=['q','w','e'],value=[0,1,2])\n",
        "data_['VAS'] = data_['VAS'].replace(to_replace=['q','w','e'],value=[0,1,2])\n",
        "data_['Duration of symptoms'] = data_['Duration of symptoms'].replace(to_replace=['q','w','e','r'],value=[0,1,2,3])\n",
        "\n",
        "data_.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2eihjkNG9u0s",
        "outputId": "94465474-1eb8-4778-9c91-2845b7b1fecf"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 1945 entries, 12328 to 11921\n",
            "Data columns (total 29 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   Sex                     1945 non-null   int64  \n",
            " 1   Age                     1945 non-null   float64\n",
            " 2   Dominant side operated  1945 non-null   int64  \n",
            " 3   vas                     1945 non-null   float64\n",
            " 4   Time                    1945 non-null   int64  \n",
            " 5   Trauma-related          1945 non-null   float64\n",
            " 6   Flex                    1945 non-null   float64\n",
            " 7   Abd                     1945 non-null   float64\n",
            " 8   ER                      1945 non-null   float64\n",
            " 9   IR                      1945 non-null   float64\n",
            " 10  Jobe                    1945 non-null   float64\n",
            " 11  Bear hug                1945 non-null   float64\n",
            " 12  Belly press             1945 non-null   float64\n",
            " 13  ERLS                    1945 non-null   float64\n",
            " 14  SS                      1945 non-null   float64\n",
            " 15  IS                      1945 non-null   float64\n",
            " 16  SSC                     1945 non-null   float64\n",
            " 17  ASES                    1945 non-null   float64\n",
            " 18  Quick-DASH              1945 non-null   float64\n",
            " 19  Constant-Murley         1945 non-null   float64\n",
            " 20  UCLA                    1945 non-null   float64\n",
            " 21  SST                     1945 non-null   float64\n",
            " 22  classier                1945 non-null   int64  \n",
            " 23  Flexion                 1945 non-null   int64  \n",
            " 24  Abduction               1945 non-null   int64  \n",
            " 25  External rotation       1945 non-null   int64  \n",
            " 26  Internal rotation       1945 non-null   int64  \n",
            " 27  VAS                     1945 non-null   int64  \n",
            " 28  Duration of symptoms    1945 non-null   int64  \n",
            "dtypes: float64(19), int64(10)\n",
            "memory usage: 455.9 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = data_.drop(columns=['classier','vas','Time','Flex' , 'Abd' , 'ER' , 'IR' ,'SST','Quick-DASH'])\n",
        "features"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "33xIa3-n-eQt",
        "outputId": "b93fd01d-18d4-453d-914f-ba3fd1a11aee"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Sex   Age  Dominant side operated  Trauma-related  Jobe  Bear hug  \\\n",
              "ID                                                                         \n",
              "12328    1  59.0                       1             1.0   1.0       1.0   \n",
              "10885    1  67.0                       0             0.0   1.0       1.0   \n",
              "12028    0  21.0                       0             1.0   0.0       0.0   \n",
              "10063    1  63.0                       0             0.0   1.0       1.0   \n",
              "10656    1  45.0                       0             0.0   1.0       1.0   \n",
              "...    ...   ...                     ...             ...   ...       ...   \n",
              "11689    1  54.0                       0             0.0   1.0       1.0   \n",
              "10635    0  59.0                       0             1.0   1.0       1.0   \n",
              "10301    1  62.0                       0             0.0   1.0       0.0   \n",
              "11358    1  56.0                       0             0.0   1.0       1.0   \n",
              "11921    0  49.0                       0             0.0   1.0       1.0   \n",
              "\n",
              "       Belly press  ERLS   SS   IS  SSC       ASES  Constant-Murley  \\\n",
              "ID                                                                    \n",
              "12328          1.0   1.0  4.0  4.0  4.0  40.000000        50.000000   \n",
              "10885          1.0   0.0  4.0  4.0  4.0  62.650342        72.527569   \n",
              "12028          0.0   0.0  5.0  5.0  5.0  93.000000        96.000000   \n",
              "10063          0.0   0.0  4.0  5.0  5.0  62.650342        72.527569   \n",
              "10656          1.0   0.0  3.0  4.0  3.0  62.650342        72.527569   \n",
              "...            ...   ...  ...  ...  ...        ...              ...   \n",
              "11689          1.0   1.0  3.0  5.0  5.0  48.000000        48.000000   \n",
              "10635          0.0   0.0  4.0  5.0  4.0  48.000000        71.000000   \n",
              "10301          0.0   1.0  3.0  5.0  5.0  72.000000        69.000000   \n",
              "11358          1.0   0.0  4.0  5.0  4.0  73.000000        90.000000   \n",
              "11921          1.0   0.0  5.0  5.0  4.0  70.000000        63.000000   \n",
              "\n",
              "            UCLA  Flexion  Abduction  External rotation  Internal rotation  \\\n",
              "ID                                                                           \n",
              "12328  17.000000        2          1                  0                  0   \n",
              "10885  22.991105        3          3                  2                  1   \n",
              "12028  33.000000        3          3                  3                  1   \n",
              "10063  22.991105        3          3                  3                  0   \n",
              "10656  22.991105        3          3                  2                  2   \n",
              "...          ...      ...        ...                ...                ...   \n",
              "11689  23.000000        2          1                  1                  0   \n",
              "10635  15.000000        3          3                  3                  0   \n",
              "10301  26.000000        3          3                  2                  0   \n",
              "11358  23.000000        3          3                  2                  2   \n",
              "11921  14.000000        3          3                  1                  0   \n",
              "\n",
              "       VAS  Duration of symptoms  \n",
              "ID                                \n",
              "12328    1                     1  \n",
              "10885    1                     3  \n",
              "12028    0                     2  \n",
              "10063    1                     1  \n",
              "10656    1                     1  \n",
              "...    ...                   ...  \n",
              "11689    1                     1  \n",
              "10635    1                     0  \n",
              "10301    0                     3  \n",
              "11358    0                     3  \n",
              "11921    0                     0  \n",
              "\n",
              "[1945 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e28f8273-b19e-448c-bcd7-1d755a43f5fa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Dominant side operated</th>\n",
              "      <th>Trauma-related</th>\n",
              "      <th>Jobe</th>\n",
              "      <th>Bear hug</th>\n",
              "      <th>Belly press</th>\n",
              "      <th>ERLS</th>\n",
              "      <th>SS</th>\n",
              "      <th>IS</th>\n",
              "      <th>SSC</th>\n",
              "      <th>ASES</th>\n",
              "      <th>Constant-Murley</th>\n",
              "      <th>UCLA</th>\n",
              "      <th>Flexion</th>\n",
              "      <th>Abduction</th>\n",
              "      <th>External rotation</th>\n",
              "      <th>Internal rotation</th>\n",
              "      <th>VAS</th>\n",
              "      <th>Duration of symptoms</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12328</th>\n",
              "      <td>1</td>\n",
              "      <td>59.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10885</th>\n",
              "      <td>1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>62.650342</td>\n",
              "      <td>72.527569</td>\n",
              "      <td>22.991105</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12028</th>\n",
              "      <td>0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>96.000000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10063</th>\n",
              "      <td>1</td>\n",
              "      <td>63.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>62.650342</td>\n",
              "      <td>72.527569</td>\n",
              "      <td>22.991105</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10656</th>\n",
              "      <td>1</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>62.650342</td>\n",
              "      <td>72.527569</td>\n",
              "      <td>22.991105</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11689</th>\n",
              "      <td>1</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10635</th>\n",
              "      <td>0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10301</th>\n",
              "      <td>1</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>69.000000</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11358</th>\n",
              "      <td>1</td>\n",
              "      <td>56.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>73.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11921</th>\n",
              "      <td>0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1945 rows × 20 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e28f8273-b19e-448c-bcd7-1d755a43f5fa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e28f8273-b19e-448c-bcd7-1d755a43f5fa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e28f8273-b19e-448c-bcd7-1d755a43f5fa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target = data_.classier\n",
        "target"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IYMJhywp-jkO",
        "outputId": "64fc0cae-e108-46dd-b826-8f2004bdf3cb"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ID\n",
              "12328    0\n",
              "10885    0\n",
              "12028    0\n",
              "10063    0\n",
              "10656    0\n",
              "        ..\n",
              "11689    1\n",
              "10635    1\n",
              "10301    1\n",
              "11358    1\n",
              "11921    1\n",
              "Name: classier, Length: 1945, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler,MinMaxScaler\n",
        "transfer= StandardScaler()\n",
        "features_ = transfer.fit_transform(features)\n",
        "from sklearn.model_selection import train_test_split\n",
        "train_features, test_features, train_target, test_target = train_test_split(features,target,test_size = 0.2, random_state = 99)\n",
        "print(train_features.shape)\n",
        "print(train_target.shape)\n",
        "print(test_features.shape)\n",
        "print(test_target.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MP0aKmV5__7U",
        "outputId": "da24292b-f589-459d-ff2d-3a9d8a7c8f5f"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1556, 20)\n",
            "(1556,)\n",
            "(389, 20)\n",
            "(389,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold,ShuffleSplit,cross_val_score\n",
        "kf = KFold(n_splits=10)\n",
        "ss = ShuffleSplit(n_splits=10, test_size=0.2, random_state=99)\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "log_clf = LogisticRegression(solver='liblinear')\n",
        "svm_clf = SVC()\n",
        "tree_clf = DecisionTreeClassifier()\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "voting_clf = VotingClassifier(\n",
        "    estimators=[('lr', log_clf), ('svc', svm_clf), ('tree', tree_clf)],\n",
        "    voting='hard')\n",
        "voting_clf.fit(train_features, train_target)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u3LgGW1nAR3B",
        "outputId": "1be69b40-be3d-4e7c-dd74-9af587d862fe"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VotingClassifier(estimators=[('lr', LogisticRegression(solver='liblinear')),\n",
              "                             ('svc', SVC()),\n",
              "                             ('tree', DecisionTreeClassifier())])"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, roc_curve,accuracy_score,precision_score,recall_score"
      ],
      "metadata": {
        "id": "ck8-1OqeA9t_"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        ">>> y_true = test_target\n",
        ">>> y_pred = voting_clf.predict(test_features)\n",
        ">>> target_names = ['RCT', 'none']\n",
        ">>> print(classification_report(y_true, y_pred, target_names=target_names))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ycyVkcuTBE9T",
        "outputId": "1fc8c522-7612-4210-afc4-11042e2748ae"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         RCT       0.80      0.98      0.89       302\n",
            "        none       0.75      0.17      0.28        87\n",
            "\n",
            "    accuracy                           0.80       389\n",
            "   macro avg       0.78      0.58      0.58       389\n",
            "weighted avg       0.79      0.80      0.75       389\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "np.random.seed(42)\n",
        "for i in range(1,40,1):\n",
        "  print(f\"With {i*10} estimators:\")\n",
        "  clf2=RandomForestClassifier(n_estimators=i*10,max_depth=i,random_state=i).fit(train_features,train_target)\n",
        "  print(f\"Accuracy: {clf2.score(test_features,test_target)*100:2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yBK3lMxCB6z8",
        "outputId": "fc717e69-8ee8-48f9-982f-fbf5696a1ebd"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With 10 estimators:\n",
            "Accuracy: 77.634961%\n",
            "With 20 estimators:\n",
            "Accuracy: 77.892031%\n",
            "With 30 estimators:\n",
            "Accuracy: 80.719794%\n",
            "With 40 estimators:\n",
            "Accuracy: 82.262211%\n",
            "With 50 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 60 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 70 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 80 estimators:\n",
            "Accuracy: 84.575835%\n",
            "With 90 estimators:\n",
            "Accuracy: 83.547558%\n",
            "With 100 estimators:\n",
            "Accuracy: 83.290488%\n",
            "With 110 estimators:\n",
            "Accuracy: 85.861183%\n",
            "With 120 estimators:\n",
            "Accuracy: 84.832905%\n",
            "With 130 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 140 estimators:\n",
            "Accuracy: 84.318766%\n",
            "With 150 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 160 estimators:\n",
            "Accuracy: 84.318766%\n",
            "With 170 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 180 estimators:\n",
            "Accuracy: 84.832905%\n",
            "With 190 estimators:\n",
            "Accuracy: 85.089974%\n",
            "With 200 estimators:\n",
            "Accuracy: 84.575835%\n",
            "With 210 estimators:\n",
            "Accuracy: 85.861183%\n",
            "With 220 estimators:\n",
            "Accuracy: 85.604113%\n",
            "With 230 estimators:\n",
            "Accuracy: 85.089974%\n",
            "With 240 estimators:\n",
            "Accuracy: 85.347044%\n",
            "With 250 estimators:\n",
            "Accuracy: 85.604113%\n",
            "With 260 estimators:\n",
            "Accuracy: 84.318766%\n",
            "With 270 estimators:\n",
            "Accuracy: 83.547558%\n",
            "With 280 estimators:\n",
            "Accuracy: 85.089974%\n",
            "With 290 estimators:\n",
            "Accuracy: 84.318766%\n",
            "With 300 estimators:\n",
            "Accuracy: 85.089974%\n",
            "With 310 estimators:\n",
            "Accuracy: 84.575835%\n",
            "With 320 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 330 estimators:\n",
            "Accuracy: 84.832905%\n",
            "With 340 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 350 estimators:\n",
            "Accuracy: 85.604113%\n",
            "With 360 estimators:\n",
            "Accuracy: 85.089974%\n",
            "With 370 estimators:\n",
            "Accuracy: 85.089974%\n",
            "With 380 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 390 estimators:\n",
            "Accuracy: 85.604113%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost\n",
        "xgb_clf = xgboost.XGBClassifier(learning_rate=0.3,\n",
        "    n_estimators=20,\n",
        "    seed=20,\n",
        "    verbosity=1\n",
        ")\n",
        "xgb_clf.fit(train_features, train_target)\n",
        "# from sklearn.metrics import brier_score_loss as BS\n",
        "# y_true = test_target\n",
        "# y_pred = xgb_clf.predict(test_features)\n",
        "# BS(y_true,y_pred)\n",
        "\n",
        "xgboost_version = xgboost.__version__\n",
        "print(xgboost_version)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xtosfP3vCTKk",
        "outputId": "52e3b590-94d3-42ab-bdee-1898e389c7e5"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "TTPY1yLPA4VF"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        ">>> y_true = test_target\n",
        ">>> y_pred = xgb_clf.predict(test_features)\n",
        ">>> target_names = ['RCT', 'none']\n",
        ">>> print(classification_report(y_true, y_pred, target_names=target_names))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tdJEjB1BDfkP",
        "outputId": "ac7e9791-5c3a-4a79-8acc-2d666589bb07"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         RCT       0.89      0.95      0.92       302\n",
            "        none       0.76      0.57      0.65        87\n",
            "\n",
            "    accuracy                           0.86       389\n",
            "   macro avg       0.82      0.76      0.78       389\n",
            "weighted avg       0.86      0.86      0.86       389\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# !pip install shap\n",
        "# import shap\n",
        "# import numpy\n",
        "# import sklearn\n"
      ],
      "metadata": {
        "id": "ZPjAiDD5ENsn"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # Create object that can calculate shap values\n",
        "# explainer = shap.TreeExplainer(xgb_clf)\n",
        "# # Calculate Shap values\n",
        "# shap_values = explainer.shap_values(train_features)"
      ],
      "metadata": {
        "id": "GQqz1gIcEgFW"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# shap_sum = np.abs(shap_values).mean(axis=0)\n",
        "# importance_df = pd.DataFrame([train_features.columns.tolist(), shap_sum.tolist()]).T\n",
        "# importance_df.columns = ['column_name', 'shap_importance']\n",
        "# importance_df = importance_df.sort_values('shap_importance', ascending=False)\n",
        "# importance_df"
      ],
      "metadata": {
        "id": "1qPk3ydrEjYX"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# shap.summary_plot(shap_values,train_features,plot_type=\"bar\",show = False)\n",
        "# myfig = plt.gcf()\n",
        "# myfig.savefig('./figure1.tiff',bbox_inches='tight',dpi=300) "
      ],
      "metadata": {
        "id": "VTuA8pwKEp71"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# shap.summary_plot(shap_values, train_features, feature_names=train_features.columns,show = False)\n",
        "\n",
        "# myfig = plt.gcf()\n",
        "# myfig.savefig('./figure2.tiff',bbox_inches='tight',dpi=600) "
      ],
      "metadata": {
        "id": "T95EdyUdEsm4"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from sklearn.metrics import plot_roc_curve\n",
        "# import matplotlib.pylab as plt\n",
        "# f1_disp = plot_roc_curve(clf, test_features, test_target)\n",
        "# f2_disp = plot_roc_curve(stk_clf, test_features, test_target,ax =f1_disp.ax_)\n",
        "# f3_disp = plot_roc_curve(bag_clf, test_features, test_target,ax =f2_disp.ax_)\n",
        "# f4_disp = plot_roc_curve(ada_clf, test_features, test_target,ax =f3_disp.ax_)\n",
        "# f5_disp = plot_roc_curve(gra_clf, test_features, test_target,ax =f4_disp.ax_)\n",
        "# f6_disp = plot_roc_curve(rfc_clf, test_features, test_target,ax =f5_disp.ax_)\n",
        "# f7_disp = plot_roc_curve(xgb_clf, test_features, test_target,ax =f6_disp.ax_)\n",
        "# f7_disp.figure_.suptitle(\"ROC curve comparison\")\n",
        "# myfig = plt.gcf()\n",
        "# myfig.savefig('./figure3.tiff',dpi=300) \n",
        "# plt.show()"
      ],
      "metadata": {
        "id": "ceM8hGRgE75x"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from sklearn.metrics import plot_confusion_matrix, plot_roc_curve\n",
        "\n",
        "# plot_confusion_matrix(xgb_clf, test_features, test_target)\n",
        "\n",
        "# plot_roc_curve(xgb_clf, test_features, test_target)\n"
      ],
      "metadata": {
        "id": "kUMNgHUTE9Uc"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "joblib.dump(xgb_clf,open(\"final_model.p\",\"wb\"))"
      ],
      "metadata": {
        "id": "GKaXvK8EFSem"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install xgboost"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oGTxdFixTzj4",
        "outputId": "72b9d377-e7a7-40d0-aeda-184a3e2e8e7a"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.7/dist-packages (0.90)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.21.6)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.4.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn\n",
        "sklearn_version = sklearn.__version__\n",
        "print(sklearn_version)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZAbdqzFoFPCx",
        "outputId": "b62a1a5e-f0d7-48f1-8547-a6c401362532"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit\n",
        "!pip install pyngrok===4.1.1\n",
        "\n",
        "from pyngrok import ngrok"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9JUMaN1jFtzL",
        "outputId": "f28b3256-885c-4084-84db-db2c11be2483"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting streamlit\n",
            "  Downloading streamlit-1.10.0-py2.py3-none-any.whl (9.1 MB)\n",
            "\u001b[K     |████████████████████████████████| 9.1 MB 4.6 MB/s \n",
            "\u001b[?25hRequirement already satisfied: protobuf<4,>=3.12 in /usr/local/lib/python3.7/dist-packages (from streamlit) (3.17.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from streamlit) (1.21.6)\n",
            "Requirement already satisfied: importlib-metadata>=1.4 in /usr/local/lib/python3.7/dist-packages (from streamlit) (4.11.4)\n",
            "Collecting watchdog\n",
            "  Downloading watchdog-2.1.9-py3-none-manylinux2014_x86_64.whl (78 kB)\n",
            "\u001b[K     |████████████████████████████████| 78 kB 6.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (7.1.2)\n",
            "Requirement already satisfied: semver in /usr/local/lib/python3.7/dist-packages (from streamlit) (2.13.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from streamlit) (2.8.2)\n",
            "Requirement already satisfied: pyarrow in /usr/local/lib/python3.7/dist-packages (from streamlit) (6.0.1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from streamlit) (4.1.1)\n",
            "Collecting validators\n",
            "  Downloading validators-0.20.0.tar.gz (30 kB)\n",
            "Collecting toml\n",
            "  Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n",
            "Requirement already satisfied: attrs in /usr/local/lib/python3.7/dist-packages (from streamlit) (21.4.0)\n",
            "Requirement already satisfied: pandas>=0.21.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (1.3.5)\n",
            "Collecting rich\n",
            "  Downloading rich-12.4.4-py3-none-any.whl (232 kB)\n",
            "\u001b[K     |████████████████████████████████| 232 kB 44.8 MB/s \n",
            "\u001b[?25hCollecting blinker\n",
            "  Downloading blinker-1.4.tar.gz (111 kB)\n",
            "\u001b[K     |████████████████████████████████| 111 kB 50.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: tornado>=5.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (5.1.1)\n",
            "Collecting gitpython!=3.1.19\n",
            "  Downloading GitPython-3.1.27-py3-none-any.whl (181 kB)\n",
            "\u001b[K     |████████████████████████████████| 181 kB 44.2 MB/s \n",
            "\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from streamlit) (21.3)\n",
            "Collecting pympler>=0.9\n",
            "  Downloading Pympler-1.0.1-py3-none-any.whl (164 kB)\n",
            "\u001b[K     |████████████████████████████████| 164 kB 58.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: tzlocal in /usr/local/lib/python3.7/dist-packages (from streamlit) (1.5.1)\n",
            "Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (7.1.2)\n",
            "Collecting pydeck>=0.1.dev5\n",
            "  Downloading pydeck-0.7.1-py2.py3-none-any.whl (4.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 4.3 MB 40.9 MB/s \n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from streamlit) (2.23.0)\n",
            "Requirement already satisfied: cachetools>=4.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (4.2.4)\n",
            "Requirement already satisfied: altair>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from streamlit) (4.2.0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from altair>=3.2.0->streamlit) (2.11.3)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.7/dist-packages (from altair>=3.2.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.7/dist-packages (from altair>=3.2.0->streamlit) (4.3.3)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.7/dist-packages (from altair>=3.2.0->streamlit) (0.11.2)\n",
            "Collecting gitdb<5,>=4.0.1\n",
            "  Downloading gitdb-4.0.9-py3-none-any.whl (63 kB)\n",
            "\u001b[K     |████████████████████████████████| 63 kB 1.6 MB/s \n",
            "\u001b[?25hCollecting smmap<6,>=3.0.1\n",
            "  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=1.4->streamlit) (3.8.0)\n",
            "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.7/dist-packages (from jsonschema>=3.0->altair>=3.2.0->streamlit) (0.18.1)\n",
            "Requirement already satisfied: importlib-resources>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from jsonschema>=3.0->altair>=3.2.0->streamlit) (5.7.1)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.21.0->streamlit) (2022.1)\n",
            "Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.7/dist-packages (from protobuf<4,>=3.12->streamlit) (1.15.0)\n",
            "Collecting ipykernel>=5.1.2\n",
            "  Downloading ipykernel-6.15.0-py3-none-any.whl (133 kB)\n",
            "\u001b[K     |████████████████████████████████| 133 kB 53.3 MB/s \n",
            "\u001b[?25hRequirement already satisfied: traitlets>=4.3.2 in /usr/local/lib/python3.7/dist-packages (from pydeck>=0.1.dev5->streamlit) (5.1.1)\n",
            "Requirement already satisfied: ipywidgets>=7.0.0 in /usr/local/lib/python3.7/dist-packages (from pydeck>=0.1.dev5->streamlit) (7.7.0)\n",
            "Requirement already satisfied: debugpy>=1.0 in /usr/local/lib/python3.7/dist-packages (from ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (1.0.0)\n",
            "Collecting jupyter-client>=6.1.12\n",
            "  Downloading jupyter_client-7.3.4-py3-none-any.whl (132 kB)\n",
            "\u001b[K     |████████████████████████████████| 132 kB 42.0 MB/s \n",
            "\u001b[?25hRequirement already satisfied: psutil in /usr/local/lib/python3.7/dist-packages (from ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (5.4.8)\n",
            "Collecting tornado>=5.0\n",
            "  Downloading tornado-6.1-cp37-cp37m-manylinux2010_x86_64.whl (428 kB)\n",
            "\u001b[K     |████████████████████████████████| 428 kB 2.7 MB/s \n",
            "\u001b[?25hRequirement already satisfied: matplotlib-inline>=0.1 in /usr/local/lib/python3.7/dist-packages (from ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (0.1.3)\n",
            "Collecting ipython>=7.23.1\n",
            "  Downloading ipython-7.34.0-py3-none-any.whl (793 kB)\n",
            "\u001b[K     |████████████████████████████████| 793 kB 44.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.7/dist-packages (from ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (23.1.0)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.7/dist-packages (from ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (1.5.5)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.7/dist-packages (from ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (4.8.0)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (4.4.2)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (2.6.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.7/dist-packages (from ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (0.2.0)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (57.4.0)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (0.7.5)\n",
            "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.7/dist-packages (from ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (0.18.1)\n",
            "Collecting prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0\n",
            "  Downloading prompt_toolkit-3.0.30-py3-none-any.whl (381 kB)\n",
            "\u001b[K     |████████████████████████████████| 381 kB 5.0 MB/s \n",
            "\u001b[?25hRequirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (1.1.0)\n",
            "Requirement already satisfied: nbformat>=4.2.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.4.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (3.6.0)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.2.0)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.7/dist-packages (from jedi>=0.16->ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (0.8.3)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->altair>=3.2.0->streamlit) (2.0.1)\n",
            "Requirement already satisfied: jupyter-core>=4.9.2 in /usr/local/lib/python3.7/dist-packages (from jupyter-client>=6.1.12->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (4.10.0)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.7/dist-packages (from nbformat>=4.2.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (2.15.3)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect>4.3->ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=7.23.1->ipykernel>=5.1.2->pydeck>=0.1.dev5->streamlit) (0.2.5)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.7/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.3.1)\n",
            "Requirement already satisfied: Send2Trash in /usr/local/lib/python3.7/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (1.8.0)\n",
            "Requirement already satisfied: terminado>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.13.3)\n",
            "Requirement already satisfied: nbconvert in /usr/local/lib/python3.7/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.6.1)\n",
            "Requirement already satisfied: testpath in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.6.0)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (5.0.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.7.1)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (1.5.0)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.8.4)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.7/dist-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->pydeck>=0.1.dev5->streamlit) (0.5.1)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->streamlit) (3.0.9)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->streamlit) (2022.6.15)\n",
            "Collecting commonmark<0.10.0,>=0.9.0\n",
            "  Downloading commonmark-0.9.1-py2.py3-none-any.whl (51 kB)\n",
            "\u001b[K     |████████████████████████████████| 51 kB 5.8 MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: blinker, validators\n",
            "  Building wheel for blinker (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for blinker: filename=blinker-1.4-py3-none-any.whl size=13478 sha256=f0b1343c3f3a0e310b05e3b004da75ac462b6764588e5c3d3856b300df8790b7\n",
            "  Stored in directory: /root/.cache/pip/wheels/22/f5/18/df711b66eb25b21325c132757d4314db9ac5e8dabeaf196eab\n",
            "  Building wheel for validators (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for validators: filename=validators-0.20.0-py3-none-any.whl size=19582 sha256=e8778d5833e1f732aeec8cc9791e3833ba9c7d3f37d0423047eb0109f8fafdd6\n",
            "  Stored in directory: /root/.cache/pip/wheels/5f/55/ab/36a76989f7f88d9ca7b1f68da6d94252bb6a8d6ad4f18e04e9\n",
            "Successfully built blinker validators\n",
            "Installing collected packages: tornado, prompt-toolkit, jupyter-client, ipython, ipykernel, smmap, gitdb, commonmark, watchdog, validators, toml, rich, pympler, pydeck, gitpython, blinker, streamlit\n",
            "  Attempting uninstall: tornado\n",
            "    Found existing installation: tornado 5.1.1\n",
            "    Uninstalling tornado-5.1.1:\n",
            "      Successfully uninstalled tornado-5.1.1\n",
            "  Attempting uninstall: prompt-toolkit\n",
            "    Found existing installation: prompt-toolkit 1.0.18\n",
            "    Uninstalling prompt-toolkit-1.0.18:\n",
            "      Successfully uninstalled prompt-toolkit-1.0.18\n",
            "  Attempting uninstall: jupyter-client\n",
            "    Found existing installation: jupyter-client 5.3.5\n",
            "    Uninstalling jupyter-client-5.3.5:\n",
            "      Successfully uninstalled jupyter-client-5.3.5\n",
            "  Attempting uninstall: ipython\n",
            "    Found existing installation: ipython 5.5.0\n",
            "    Uninstalling ipython-5.5.0:\n",
            "      Successfully uninstalled ipython-5.5.0\n",
            "  Attempting uninstall: ipykernel\n",
            "    Found existing installation: ipykernel 4.10.1\n",
            "    Uninstalling ipykernel-4.10.1:\n",
            "      Successfully uninstalled ipykernel-4.10.1\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "nbclient 0.6.4 requires traitlets>=5.2.2, but you have traitlets 5.1.1 which is incompatible.\n",
            "jupyter-console 5.2.0 requires prompt-toolkit<2.0.0,>=1.0.0, but you have prompt-toolkit 3.0.30 which is incompatible.\n",
            "google-colab 1.0.0 requires ipykernel~=4.10, but you have ipykernel 6.15.0 which is incompatible.\n",
            "google-colab 1.0.0 requires ipython~=5.5.0, but you have ipython 7.34.0 which is incompatible.\n",
            "google-colab 1.0.0 requires tornado~=5.1.0; python_version >= \"3.0\", but you have tornado 6.1 which is incompatible.\u001b[0m\n",
            "Successfully installed blinker-1.4 commonmark-0.9.1 gitdb-4.0.9 gitpython-3.1.27 ipykernel-6.15.0 ipython-7.34.0 jupyter-client-7.3.4 prompt-toolkit-3.0.30 pydeck-0.7.1 pympler-1.0.1 rich-12.4.4 smmap-5.0.0 streamlit-1.10.0 toml-0.10.2 tornado-6.1 validators-0.20.0 watchdog-2.1.9\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "IPython",
                  "prompt_toolkit",
                  "tornado"
                ]
              }
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting pyngrok===4.1.1\n",
            "  Downloading pyngrok-4.1.1.tar.gz (18 kB)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyngrok===4.1.1) (0.16.0)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.7/dist-packages (from pyngrok===4.1.1) (3.13)\n",
            "Building wheels for collected packages: pyngrok\n",
            "  Building wheel for pyngrok (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyngrok: filename=pyngrok-4.1.1-py3-none-any.whl size=15983 sha256=7e125e4c5648057d141fd5d29f444b8472ab5a123e4d2e1fa9fd9157feeb5f5b\n",
            "  Stored in directory: /root/.cache/pip/wheels/b1/d9/12/045a042fee3127dc40ba6f5df2798aa2df38c414bf533ca765\n",
            "Successfully built pyngrok\n",
            "Installing collected packages: pyngrok\n",
            "Successfully installed pyngrok-4.1.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile diagnosis-rct-app.py\n",
        "import streamlit as st\n",
        "import base64\n",
        "import sklearn\n",
        "import numpy as np\n",
        "import pickle as pkl\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scal=MinMaxScaler()\n",
        "#Load the saved model\n",
        "model=pkl.load(open(\"final_model.p\",\"rb\"))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "st.set_page_config(page_title=\"rct App\",page_icon=\"⚕️\",layout=\"centered\",initial_sidebar_state=\"expanded\")\n",
        "\n",
        "\n",
        "\n",
        "def preprocess(sex,age,side,trauma,jobe,bear,belly,erls,ss,IS,ssc,ases,const,ucla,flex,abd,er,ir,vas,time ):   \n",
        " \n",
        "    \n",
        "    # Pre-processing user input   \n",
        "    if sex==\"male\":\n",
        "        sex=0\n",
        "    else: sex=1\n",
        "    \n",
        "    #age\n",
        "        \n",
        "    if side==\"Yes\":\n",
        "        side=1 \n",
        "    else: side=0\n",
        "        \n",
        "    if vas==\"0-4\":\n",
        "        vas=0\n",
        "    elif vas == \"5-7\"：\n",
        "        vas=1\n",
        "    else：vas=2\n",
        "    \n",
        "    if time==\"0-3\":\n",
        "        time=0\n",
        "    elif time == \"3-6\"：\n",
        "        time=1\n",
        "    elif time == \"6-12\"：\n",
        "        time=2\n",
        "    else：time = 3\n",
        "        \n",
        "    if trauma==\"Yes\":\n",
        "        trauma=1 \n",
        "    else: trauma=0\n",
        "        \n",
        "    if flex==\"0-45\":\n",
        "        flex=0\n",
        "    elif flex == \"45-90\"：\n",
        "        flex=1\n",
        "    elif flex == \"90-135\"：\n",
        "        flex=2\n",
        "    else：flex = 3\n",
        "        \n",
        "    if abd==\"0-45\":\n",
        "        abd=0\n",
        "    elif abd == \"45-90\"：\n",
        "        abd=1\n",
        "    elif abd == \"90-135\"：\n",
        "        abd=2\n",
        "    else：abd = 3\n",
        "        \n",
        "    if er==\"0-20\":\n",
        "        er=0\n",
        "    elif er == \"20-40\"：\n",
        "        er=1\n",
        "    elif er == \"40-60\"：\n",
        "        er=2\n",
        "    else：er = 3\n",
        "        \n",
        "    if ir==\"below S1\":\n",
        "        ir=0\n",
        "    elif ir == \"L1-L5\"：\n",
        "        ir=1\n",
        "    else：ir = 2\n",
        "    \n",
        "    if jobe==\"+\":\n",
        "        jobe=1 \n",
        "    else: jobe=0\n",
        "        \n",
        "    if bear==\"+\":\n",
        "        bear=1 \n",
        "    else: bear= 0\n",
        "        \n",
        "    if belly==\"+\":\n",
        "        belly=1 \n",
        "    else: belly= 0\n",
        "    \n",
        "    if erls==\"+\":\n",
        "        erls=1 \n",
        "    else: erls= 0\n",
        "        \n",
        "    # ss is ssc ases const ucla\n",
        "    \n",
        "    \n",
        "    \n",
        "\n",
        "    user_input=[sex,age,side,trauma,jobe,bear,belly,erls,ss,IS,ssc,ases,const,ucla,flex,abd,er,ir,vas,time ]\n",
        "    user_input=np.array(user_input)\n",
        "    user_input=user_input.reshape(1,-1)\n",
        "    user_input=scal.fit_transform(user_input)\n",
        "    prediction = model.predict(user_input)\n",
        "\n",
        "    return prediction\n",
        "\n",
        "    \n",
        "\n",
        "       \n",
        "    # front end elements of the web page \n",
        "html_temp = \"\"\" \n",
        "    <div style =\"background-color:pink;padding:13px\"> \n",
        "    <h1 style =\"color:black;text-align:center;\">Healthy Heart App</h1> \n",
        "    </div> \n",
        "    \"\"\"\n",
        "      \n",
        "# display the front end aspect\n",
        "st.markdown(html_temp, unsafe_allow_html = True) \n",
        "st.subheader('by Amlan Mohanty ')\n",
        "      \n",
        "# following lines create boxes in which user can enter data required to make prediction\n",
        "age=st.selectbox (\"Age\",range(1,121,1))\n",
        "sex = st.radio(\"Select Gender: \", ('male', 'female'))\n",
        "side=st.radio(\"is the painful shoulder your dominant side?\", ['Yes','No'])\n",
        "trauma=st.radio(\"have you get injuried in your shoulder?\", ['Yes','No'])\n",
        "jobe=st.radio(\"JOBE test\", ['+','-'])\n",
        "bear=st.radio(\"BEAR HUG\", ['+','-'])\n",
        "belly=st.radio(\"BELLY PRESS\", ['+','-'])\n",
        "erls=st.radio(\"ERLS\", ['+','-'])\n",
        "ss=st.selectbox('the strength of supraspinatus ',range(0,5,1))\n",
        "IS=st.selectbox('the strength of infraspinatus',range(0,5,1)) \n",
        "ssc=st.selectbox('the strength of subscapularis ',range(0,5,1))\n",
        "ases=st.selectbox (\"ASES\",range(1,100,1))\n",
        "const=st.selectbox (\"Constant-Murley\",range(1,100,1))\n",
        "ucla=st.selectbox (\"UCLA\",range(1,100,1))\n",
        "vas,time \n",
        "flex=st.selectbox('Flexion',(\"0-45°\",\"45-90°\",\"90-135°\",\"135-180°\"))\n",
        "abd=st.selectbox('Abduction',(\"0-45°\",\"45-90°\",\"90-135°\",\"135-180°\"))\n",
        "er=st.selectbox('External rotation',(\"0-20°\",\"20-40°\",\"40-60°\",\"60-80°\"))\n",
        "ir=st.selectbox('Internal rotation',(\"below S1\",\"L1-L5\",\"above T12\"))\n",
        "vas=st.selectbox('VAS',(\"0-4\",\"5-7\",\"8-10°\"))\n",
        "time=st.selectbox('Duration of symptoms/months',(\"<3\",\"3-6\",\"6-12\",\">12\"))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# cp = st.selectbox('Chest Pain Type',(\"Typical angina\",\"Atypical angina\",\"Non-anginal pain\",\"Asymptomatic\")) \n",
        "# trestbps=st.selectbox('Resting Blood Sugar',range(1,500,1))\n",
        "# restecg=st.selectbox('Resting Electrocardiographic Results',(\"Nothing to note\",\"ST-T Wave abnormality\",\"Possible or definite left ventricular hypertrophy\"))\n",
        "# chol=st.selectbox('Serum Cholestoral in mg/dl',range(1,1000,1))\n",
        "# fbs=st.radio(\"Fasting Blood Sugar higher than 120 mg/dl\", ['Yes','No'])\n",
        "# thalach=st.selectbox('Maximum Heart Rate Achieved',range(1,300,1))\n",
        "# exang=st.selectbox('Exercise Induced Angina',[\"Yes\",\"No\"])\n",
        "# oldpeak=st.number_input('Oldpeak')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#user_input=preprocess(sex,cp,exang, fbs, slope, thal )\n",
        "pred=preprocess(sex,age,side,trauma,jobe,bear,belly,erls,ss,IS,ssc,ases,const,ucla,flex,abd,er,ir,vas,time)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "if st.button(\"Predict\"):    \n",
        " if pred[0] == 0:\n",
        "    st.error('Warning! You have high risk of getting a rct!')\n",
        "    \n",
        " else:\n",
        "    st.success('You have lower risk of getting a rct!')\n",
        "    \n",
        "   \n",
        "\n",
        "st.sidebar.subheader(\"About App\")\n",
        "\n",
        "st.sidebar.info(\"This web app is helps you to find out whether you are at a risk of developing a RCT.\")\n",
        "st.sidebar.info(\"Enter the required fields and click on the 'Predict' button to check whether you have a healthy shoulder\")\n",
        "st.sidebar.info(\"Don't forget to rate this app\")\n",
        "\n",
        "\n",
        "\n",
        "feedback = st.sidebar.slider('How much would you rate this app?',min_value=0,max_value=5,step=1)\n",
        "\n",
        "if feedback:\n",
        "  st.header(\"Thank you for rating the app!\")\n",
        "  st.info(\"Caution: This is just a prediction and not doctoral advice. Kindly see a doctor if you feel the symptoms persist.\") "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AtiO8nd_F9XW",
        "outputId": "5d36fe84-8a55-4796-b8a1-d7f69a44b17e"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing diagnosis-rct-app.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!nohup streamlit run healthy-heart-app.py &\n",
        "url = ngrok.connect(port='8501')\n",
        "url"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "vTcdIhhUGBJz",
        "outputId": "2810abfa-1a77-4cda-8c57-a63cdb739391"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nohup: appending output to 'nohup.out'\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'http://d4ee-35-222-165-200.ngrok.io'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "_7NHrfAAAyoE"
      },
      "execution_count": 36,
      "outputs": []
    }
  ]
}