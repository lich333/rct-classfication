{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "diagnosis_of_rct.ipynb",
      "provenance": [],
      "mount_file_id": "1Sz8RjKv3ZhNnky3WM1TlnZMT0fFjbQcH",
      "authorship_tag": "ABX9TyO4F5tMWMnlFg9KASKfXLUm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lich333/rct-classfication/blob/main/final_model.p\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oE4ZM0K8vd7f",
        "outputId": "17fc05d4-91f9-4d43-e03e-c420fc2d98a5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "prAumTtnwWjt"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv(\"/content/drive/MyDrive/rct_machinelearning/lcc.csv\",header=None)\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "MQbX0wIewg1M",
        "outputId": "ec49dfb6-b167-41d5-98e8-691ea61a3990"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      0       1     2   3     4   5    6      7      8     9   ...   15   16  \\\n",
              "0  10009  Female  70.0   0   6.0   7  0.0   90.0   90.0   0.0  ...  3.0  4.0   \n",
              "1  10010  Female  59.0   0   NaN   0  1.0  170.0   60.0  60.0  ...  4.0  4.0   \n",
              "2  10031  Female  53.0   0   NaN   6  1.0  100.0   90.0  60.0  ...  5.0  5.0   \n",
              "3  10045  Female  61.0   0   NaN   1  1.0  180.0  180.0  60.0  ...  5.0  5.0   \n",
              "4  10050  Female  50.0   0  10.0   4  NaN   90.0   90.0  60.0  ...  4.0  5.0   \n",
              "\n",
              "    17    18    19    20    21   22  23  24  \n",
              "0  3.0  55.0  32.0  46.0  20.0  1.0   1 NaN  \n",
              "1  4.0  75.0   2.0  75.0  31.0  9.0   1 NaN  \n",
              "2  4.0   NaN   NaN   NaN   NaN  NaN   1 NaN  \n",
              "3  5.0  82.0  11.0  78.0  24.0  7.0   1 NaN  \n",
              "4  4.0   NaN   NaN   NaN   NaN  NaN   1 NaN  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-357f6cc3-ca36-41e5-819e-c37c94aee298\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>15</th>\n",
              "      <th>16</th>\n",
              "      <th>17</th>\n",
              "      <th>18</th>\n",
              "      <th>19</th>\n",
              "      <th>20</th>\n",
              "      <th>21</th>\n",
              "      <th>22</th>\n",
              "      <th>23</th>\n",
              "      <th>24</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10009</td>\n",
              "      <td>Female</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>46.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10010</td>\n",
              "      <td>Female</td>\n",
              "      <td>59.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10031</td>\n",
              "      <td>Female</td>\n",
              "      <td>53.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10045</td>\n",
              "      <td>Female</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10050</td>\n",
              "      <td>Female</td>\n",
              "      <td>50.0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>90.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>...</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-357f6cc3-ca36-41e5-819e-c37c94aee298')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-357f6cc3-ca36-41e5-819e-c37c94aee298 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-357f6cc3-ca36-41e5-819e-c37c94aee298');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.sample(frac=1)\n"
      ],
      "metadata": {
        "id": "DE4qFpH479x5"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "columns = ['ID','Sex' , 'Age' ,'Dominant side operated' ,'vas' , 'Time','Trauma-related','Flex' , 'Abd' , 'ER' , 'IR' , 'Jobe' , 'Bear hug' ,'Belly press' ,'ERLS' ,  'SS','IS','SSC','ASES' , 'Quick-DASH' ,'Constant-Murley','UCLA','SST' , 'classier','we']"
      ],
      "metadata": {
        "id": "19iJDBGF8cCs"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "list1 = np.arange(25)\n",
        "list1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hBESZYrW8lnT",
        "outputId": "a5c0e62c-fa2c-40ea-84fb-b1735a947f9e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
              "       17, 18, 19, 20, 21, 22, 23, 24])"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dict1 = dict(zip(list1,columns))\n",
        "data = data.rename(columns=dict1)"
      ],
      "metadata": {
        "id": "d5M_houk8p8_"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['IR'] = data['IR'].replace(to_replace=['thi','butt','S 1','L5','L 3','L 1','T 11','T 9','T 7','T 5','T 3'],value=[0,1,2,3,4,5,6,7,8,9,10])\n",
        "data['Sex'] = data['Sex'].replace(to_replace=['Male','Female',],value=[0,1])"
      ],
      "metadata": {
        "id": "KBFPQmDt8y3m"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Trauma-related'] = data['Trauma-related'].fillna(value= 0)"
      ],
      "metadata": {
        "id": "drroWaCN88x8"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.drop(['we'], axis=1)"
      ],
      "metadata": {
        "id": "f3RAN6B19DOK"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1 = data\n",
        "data1.set_index('ID',inplace=True)\n",
        "data1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 534
        },
        "id": "btVVRQgS9Eex",
        "outputId": "545076ed-609a-4b1c-8672-2aaa8e73fe8c"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Sex   Age  Dominant side operated  vas  Time  Trauma-related   Flex  \\\n",
              "ID                                                                           \n",
              "10632    1  39.0                       1  4.0     1             0.0  180.0   \n",
              "11723    1  65.0                       0  1.0     2             0.0  130.0   \n",
              "10522    0  44.0                       1  5.0     1             0.0  180.0   \n",
              "10105    0  24.0                       1  NaN     0             0.0  180.0   \n",
              "10244    1  61.0                       0  5.0     0             0.0  180.0   \n",
              "...    ...   ...                     ...  ...   ...             ...    ...   \n",
              "10470    1  68.0                       1  3.0     4             0.0  160.0   \n",
              "12357    0  55.0                       0  6.0     1             1.0  180.0   \n",
              "10969    0  34.0                       0  2.0    10             0.0    NaN   \n",
              "10385    0  47.0                       1  5.0     0             0.0   90.0   \n",
              "12016    1  57.0                       1  7.0     2             0.0  180.0   \n",
              "\n",
              "         Abd    ER    IR  ...  ERLS   SS   IS  SSC  ASES  Quick-DASH  \\\n",
              "ID                        ...                                          \n",
              "10632  180.0  70.0   8.0  ...   0.0  5.0  5.0  5.0   NaN         NaN   \n",
              "11723  150.0  50.0   4.0  ...   0.0  4.0  5.0  5.0  80.0        50.0   \n",
              "10522  180.0  30.0   8.0  ...   0.0  4.0  5.0  5.0  35.0        11.0   \n",
              "10105  180.0  70.0   9.0  ...   0.0  4.0  5.0  5.0  67.0         NaN   \n",
              "10244  180.0  80.0  10.0  ...   0.0  4.0  4.0  5.0  68.0         NaN   \n",
              "...      ...   ...   ...  ...   ...  ...  ...  ...   ...         ...   \n",
              "10470  160.0  30.0   1.0  ...   1.0  4.0  4.0  5.0   NaN         NaN   \n",
              "12357  180.0  60.0   7.0  ...   0.0  4.0  5.0  5.0  63.0        20.0   \n",
              "10969    NaN   NaN   NaN  ...   NaN  NaN  NaN  NaN  78.0        11.0   \n",
              "10385   90.0  20.0   1.0  ...   1.0  4.0  4.0  4.0  48.0        43.0   \n",
              "12016  170.0  80.0   9.0  ...   1.0  3.0  5.0  4.0  63.0        11.0   \n",
              "\n",
              "       Constant-Murley  UCLA   SST  classier  \n",
              "ID                                            \n",
              "10632              NaN   NaN   NaN         0  \n",
              "11723             68.0  19.0   5.0         0  \n",
              "10522              NaN   NaN   NaN         1  \n",
              "10105              NaN   NaN   NaN         0  \n",
              "10244             79.0   NaN   6.0         0  \n",
              "...                ...   ...   ...       ...  \n",
              "10470              NaN   NaN   NaN         0  \n",
              "12357             63.0  23.0  11.0         0  \n",
              "10969             90.0  31.0  10.0         0  \n",
              "10385             44.0  17.0   4.0         0  \n",
              "12016             65.0  21.0   9.0         0  \n",
              "\n",
              "[1945 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-981e2ceb-d330-4e7a-a6b9-243f6d96afd3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Dominant side operated</th>\n",
              "      <th>vas</th>\n",
              "      <th>Time</th>\n",
              "      <th>Trauma-related</th>\n",
              "      <th>Flex</th>\n",
              "      <th>Abd</th>\n",
              "      <th>ER</th>\n",
              "      <th>IR</th>\n",
              "      <th>...</th>\n",
              "      <th>ERLS</th>\n",
              "      <th>SS</th>\n",
              "      <th>IS</th>\n",
              "      <th>SSC</th>\n",
              "      <th>ASES</th>\n",
              "      <th>Quick-DASH</th>\n",
              "      <th>Constant-Murley</th>\n",
              "      <th>UCLA</th>\n",
              "      <th>SST</th>\n",
              "      <th>classier</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10632</th>\n",
              "      <td>1</td>\n",
              "      <td>39.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11723</th>\n",
              "      <td>1</td>\n",
              "      <td>65.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10522</th>\n",
              "      <td>0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10105</th>\n",
              "      <td>0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10244</th>\n",
              "      <td>1</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>79.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10470</th>\n",
              "      <td>1</td>\n",
              "      <td>68.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12357</th>\n",
              "      <td>0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10969</th>\n",
              "      <td>0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>78.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10385</th>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>48.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12016</th>\n",
              "      <td>1</td>\n",
              "      <td>57.0</td>\n",
              "      <td>1</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1945 rows × 23 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-981e2ceb-d330-4e7a-a6b9-243f6d96afd3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-981e2ceb-d330-4e7a-a6b9-243f6d96afd3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-981e2ceb-d330-4e7a-a6b9-243f6d96afd3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_ = data1.copy()\n",
        "data_B = data_[data_['classier'] == 1]\n",
        "data_C = data_[data_['classier'] == 0]"
      ],
      "metadata": {
        "id": "S7wEhDky9Qpq"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_B = data_B.fillna(value = data_B.mean())\n",
        "# data_B.info()\n",
        "data_C = data_C.fillna(value = data_C.mean())\n",
        "# data_C.info()\n",
        "data_ = pd.concat((data_C,data_B))\n",
        "data_.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qDBg5wjJ9nU5",
        "outputId": "7d0a8ad5-5505-4e88-8b11-730bd6f7c0c9"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 1945 entries, 10632 to 11488\n",
            "Data columns (total 23 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   Sex                     1945 non-null   int64  \n",
            " 1   Age                     1945 non-null   float64\n",
            " 2   Dominant side operated  1945 non-null   int64  \n",
            " 3   vas                     1945 non-null   float64\n",
            " 4   Time                    1945 non-null   int64  \n",
            " 5   Trauma-related          1945 non-null   float64\n",
            " 6   Flex                    1945 non-null   float64\n",
            " 7   Abd                     1945 non-null   float64\n",
            " 8   ER                      1945 non-null   float64\n",
            " 9   IR                      1945 non-null   float64\n",
            " 10  Jobe                    1945 non-null   float64\n",
            " 11  Bear hug                1945 non-null   float64\n",
            " 12  Belly press             1945 non-null   float64\n",
            " 13  ERLS                    1945 non-null   float64\n",
            " 14  SS                      1945 non-null   float64\n",
            " 15  IS                      1945 non-null   float64\n",
            " 16  SSC                     1945 non-null   float64\n",
            " 17  ASES                    1945 non-null   float64\n",
            " 18  Quick-DASH              1945 non-null   float64\n",
            " 19  Constant-Murley         1945 non-null   float64\n",
            " 20  UCLA                    1945 non-null   float64\n",
            " 21  SST                     1945 non-null   float64\n",
            " 22  classier                1945 non-null   int64  \n",
            "dtypes: float64(19), int64(4)\n",
            "memory usage: 364.7 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cc = [-1,45,90,135,190]\n",
        "aa = [-1,45,90,135,190]\n",
        "bb = [-1,20,40,60,90]\n",
        "dd = [-1,5,8,11]\n",
        "ee = [-10,3,7,11]\n",
        "ff = [-10,3,6,12,1000]\n",
        "\n",
        "flexlabels = ['a','b','c','d']\n",
        "abdlabels = ['e','f','g','h']\n",
        "erlabels = ['i','j','k','l']\n",
        "irlables = ['q','w','e']\n",
        "vaslables = ['q','w','e']\n",
        "timelables = ['q','w','e','r']\n",
        "\n",
        "pd.cut(data_['Flex'],cc,labels=flexlabels)\n",
        "pd.cut(data_['Abd'],aa,labels=abdlabels)\n",
        "pd.cut(data_['ER'],bb,labels=erlabels)\n",
        "pd.cut(data_['IR'],dd,labels=irlables)\n",
        "pd.cut(data_['vas'],ee,labels=vaslables)\n",
        "pd.cut(data_['Time'],ff,labels=timelables)\n",
        "\n",
        "data_['Flexion'] = pd.cut(data_['Flex'],cc,labels=flexlabels)\n",
        "data_['Abduction'] = pd.cut(data_['Abd'],aa,labels=abdlabels)\n",
        "data_['External rotation'] = pd.cut(data_['ER'],bb,labels=erlabels)\n",
        "data_['Internal rotation'] = pd.cut(data_['IR'],dd,labels=irlables)\n",
        "data_['VAS'] = pd.cut(data_['vas'],ee,labels=vaslables)\n",
        "data_['Duration of symptoms'] = pd.cut(data_['Time'],ff,labels=timelables)\n",
        "\n",
        "data_['Flexion'] = data_['Flexion'].replace(to_replace=['a','b','c','d'],value=[0,1,2,3])\n",
        "data_['Abduction'] = data_['Abduction'].replace(to_replace=['e','f','g','h'],value=[0,1,2,3])\n",
        "data_['External rotation'] = data_['External rotation'].replace(to_replace=['i','j','k','l'],value=[0,1,2,3])\n",
        "data_['Internal rotation'] = data_['Internal rotation'].replace(to_replace=['q','w','e'],value=[0,1,2])\n",
        "data_['VAS'] = data_['VAS'].replace(to_replace=['q','w','e'],value=[0,1,2])\n",
        "data_['Duration of symptoms'] = data_['Duration of symptoms'].replace(to_replace=['q','w','e','r'],value=[0,1,2,3])\n",
        "\n",
        "data_.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2eihjkNG9u0s",
        "outputId": "e71f1794-ac5d-4ad5-b7a3-ce8bc3bc0688"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 1945 entries, 10632 to 11488\n",
            "Data columns (total 29 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   Sex                     1945 non-null   int64  \n",
            " 1   Age                     1945 non-null   float64\n",
            " 2   Dominant side operated  1945 non-null   int64  \n",
            " 3   vas                     1945 non-null   float64\n",
            " 4   Time                    1945 non-null   int64  \n",
            " 5   Trauma-related          1945 non-null   float64\n",
            " 6   Flex                    1945 non-null   float64\n",
            " 7   Abd                     1945 non-null   float64\n",
            " 8   ER                      1945 non-null   float64\n",
            " 9   IR                      1945 non-null   float64\n",
            " 10  Jobe                    1945 non-null   float64\n",
            " 11  Bear hug                1945 non-null   float64\n",
            " 12  Belly press             1945 non-null   float64\n",
            " 13  ERLS                    1945 non-null   float64\n",
            " 14  SS                      1945 non-null   float64\n",
            " 15  IS                      1945 non-null   float64\n",
            " 16  SSC                     1945 non-null   float64\n",
            " 17  ASES                    1945 non-null   float64\n",
            " 18  Quick-DASH              1945 non-null   float64\n",
            " 19  Constant-Murley         1945 non-null   float64\n",
            " 20  UCLA                    1945 non-null   float64\n",
            " 21  SST                     1945 non-null   float64\n",
            " 22  classier                1945 non-null   int64  \n",
            " 23  Flexion                 1945 non-null   int64  \n",
            " 24  Abduction               1945 non-null   int64  \n",
            " 25  External rotation       1945 non-null   int64  \n",
            " 26  Internal rotation       1945 non-null   int64  \n",
            " 27  VAS                     1945 non-null   int64  \n",
            " 28  Duration of symptoms    1945 non-null   int64  \n",
            "dtypes: float64(19), int64(10)\n",
            "memory usage: 455.9 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = data_.drop(columns=['classier','vas','Time','Flex' , 'Abd' , 'ER' , 'IR' ,'SST','Quick-DASH'])\n",
        "features"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "33xIa3-n-eQt",
        "outputId": "b3c1334e-fa82-4ad5-e5a6-0936f4761a29"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Sex   Age  Dominant side operated  Trauma-related  Jobe  Bear hug  \\\n",
              "ID                                                                         \n",
              "10632    1  39.0                       1             0.0   0.0       0.0   \n",
              "11723    1  65.0                       0             0.0   1.0       1.0   \n",
              "10105    0  24.0                       1             0.0   1.0       1.0   \n",
              "10244    1  61.0                       0             0.0   1.0       1.0   \n",
              "12068    1  19.0                       0             1.0   1.0       0.0   \n",
              "...    ...   ...                     ...             ...   ...       ...   \n",
              "10750    0  37.0                       1             1.0   1.0       0.0   \n",
              "10591    0  58.0                       0             1.0   1.0       1.0   \n",
              "12326    1  55.0                       0             1.0   1.0       0.0   \n",
              "11284    1  46.0                       0             0.0   1.0       0.0   \n",
              "11488    0  66.0                       0             1.0   1.0       1.0   \n",
              "\n",
              "       Belly press  ERLS   SS   IS  SSC       ASES  Constant-Murley  \\\n",
              "ID                                                                    \n",
              "10632          0.0   0.0  5.0  5.0  5.0  62.650342        72.527569   \n",
              "11723          0.0   0.0  4.0  5.0  5.0  80.000000        68.000000   \n",
              "10105          0.0   0.0  4.0  5.0  5.0  67.000000        72.527569   \n",
              "10244          0.0   0.0  4.0  4.0  5.0  68.000000        79.000000   \n",
              "12068          0.0   0.0  4.0  5.0  5.0  70.000000        82.000000   \n",
              "...            ...   ...  ...  ...  ...        ...              ...   \n",
              "10750          1.0   1.0  4.0  4.0  5.0  93.000000       100.000000   \n",
              "10591          1.0   0.0  4.0  4.0  5.0  32.000000        49.000000   \n",
              "12326          0.0   0.0  4.0  5.0  4.0  53.000000        67.000000   \n",
              "11284          0.0   0.0  4.0  5.0  5.0  68.000000        86.000000   \n",
              "11488          1.0   1.0  4.0  4.0  5.0  55.000000        65.000000   \n",
              "\n",
              "            UCLA  Flexion  Abduction  External rotation  Internal rotation  \\\n",
              "ID                                                                           \n",
              "10632  22.991105        3          3                  3                  1   \n",
              "11723  19.000000        2          3                  2                  0   \n",
              "10105  22.991105        3          3                  3                  2   \n",
              "10244  22.991105        3          3                  3                  2   \n",
              "12068  28.000000        3          3                  3                  1   \n",
              "...          ...      ...        ...                ...                ...   \n",
              "10750  31.000000        3          3                  3                  1   \n",
              "10591  11.000000        2          2                  3                  0   \n",
              "12326  19.000000        3          3                  2                  1   \n",
              "11284  30.000000        3          3                  3                  1   \n",
              "11488  26.000000        3          3                  3                  0   \n",
              "\n",
              "       VAS  Duration of symptoms  \n",
              "ID                                \n",
              "10632    1                     0  \n",
              "11723    0                     0  \n",
              "10105    1                     0  \n",
              "10244    1                     0  \n",
              "12068    1                     3  \n",
              "...    ...                   ...  \n",
              "10750    1                     2  \n",
              "10591    1                     2  \n",
              "12326    1                     3  \n",
              "11284    1                     0  \n",
              "11488    1                     1  \n",
              "\n",
              "[1945 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b65ddb3f-9741-43cc-bb76-4f0cd250e767\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Dominant side operated</th>\n",
              "      <th>Trauma-related</th>\n",
              "      <th>Jobe</th>\n",
              "      <th>Bear hug</th>\n",
              "      <th>Belly press</th>\n",
              "      <th>ERLS</th>\n",
              "      <th>SS</th>\n",
              "      <th>IS</th>\n",
              "      <th>SSC</th>\n",
              "      <th>ASES</th>\n",
              "      <th>Constant-Murley</th>\n",
              "      <th>UCLA</th>\n",
              "      <th>Flexion</th>\n",
              "      <th>Abduction</th>\n",
              "      <th>External rotation</th>\n",
              "      <th>Internal rotation</th>\n",
              "      <th>VAS</th>\n",
              "      <th>Duration of symptoms</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10632</th>\n",
              "      <td>1</td>\n",
              "      <td>39.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>62.650342</td>\n",
              "      <td>72.527569</td>\n",
              "      <td>22.991105</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11723</th>\n",
              "      <td>1</td>\n",
              "      <td>65.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10105</th>\n",
              "      <td>0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>72.527569</td>\n",
              "      <td>22.991105</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10244</th>\n",
              "      <td>1</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>79.000000</td>\n",
              "      <td>22.991105</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12068</th>\n",
              "      <td>1</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>82.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10750</th>\n",
              "      <td>0</td>\n",
              "      <td>37.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10591</th>\n",
              "      <td>0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12326</th>\n",
              "      <td>1</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11284</th>\n",
              "      <td>1</td>\n",
              "      <td>46.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>86.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11488</th>\n",
              "      <td>0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1945 rows × 20 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b65ddb3f-9741-43cc-bb76-4f0cd250e767')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b65ddb3f-9741-43cc-bb76-4f0cd250e767 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b65ddb3f-9741-43cc-bb76-4f0cd250e767');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target = data_.classier\n",
        "target"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IYMJhywp-jkO",
        "outputId": "48ad48c8-47aa-4d58-e762-7eeedd246e9d"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ID\n",
              "10632    0\n",
              "11723    0\n",
              "10105    0\n",
              "10244    0\n",
              "12068    0\n",
              "        ..\n",
              "10750    1\n",
              "10591    1\n",
              "12326    1\n",
              "11284    1\n",
              "11488    1\n",
              "Name: classier, Length: 1945, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler,MinMaxScaler\n",
        "transfer= StandardScaler()\n",
        "features_ = transfer.fit_transform(features)\n",
        "from sklearn.model_selection import train_test_split\n",
        "train_features, test_features, train_target, test_target = train_test_split(features,target,test_size = 0.2, random_state = 99)\n",
        "print(train_features.shape)\n",
        "print(train_target.shape)\n",
        "print(test_features.shape)\n",
        "print(test_target.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MP0aKmV5__7U",
        "outputId": "56d761ad-6506-4f85-de96-c40ea734fadc"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1556, 20)\n",
            "(1556,)\n",
            "(389, 20)\n",
            "(389,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold,ShuffleSplit,cross_val_score\n",
        "kf = KFold(n_splits=10)\n",
        "ss = ShuffleSplit(n_splits=10, test_size=0.2, random_state=99)\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "log_clf = LogisticRegression(solver='liblinear')\n",
        "svm_clf = SVC()\n",
        "tree_clf = DecisionTreeClassifier()\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "voting_clf = VotingClassifier(\n",
        "    estimators=[('lr', log_clf), ('svc', svm_clf), ('tree', tree_clf)],\n",
        "    voting='hard')\n",
        "voting_clf.fit(train_features, train_target)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u3LgGW1nAR3B",
        "outputId": "d0b7fe4e-052e-42aa-9715-5a3c30782d7d"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VotingClassifier(estimators=[('lr', LogisticRegression(solver='liblinear')),\n",
              "                             ('svc', SVC()),\n",
              "                             ('tree', DecisionTreeClassifier())])"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, roc_curve,accuracy_score,precision_score,recall_score"
      ],
      "metadata": {
        "id": "ck8-1OqeA9t_"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        ">>> y_true = test_target\n",
        ">>> y_pred = voting_clf.predict(test_features)\n",
        ">>> target_names = ['RCT', 'none']\n",
        ">>> print(classification_report(y_true, y_pred, target_names=target_names))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ycyVkcuTBE9T",
        "outputId": "0ed535a2-a4a2-497a-de40-9cce84912188"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         RCT       0.79      0.99      0.88       302\n",
            "        none       0.67      0.07      0.12        87\n",
            "\n",
            "    accuracy                           0.78       389\n",
            "   macro avg       0.73      0.53      0.50       389\n",
            "weighted avg       0.76      0.78      0.71       389\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "np.random.seed(42)\n",
        "for i in range(1,40,1):\n",
        "  print(f\"With {i*10} estimators:\")\n",
        "  clf2=RandomForestClassifier(n_estimators=i*10,max_depth=i,random_state=i).fit(train_features,train_target)\n",
        "  print(f\"Accuracy: {clf2.score(test_features,test_target)*100:2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yBK3lMxCB6z8",
        "outputId": "a27c91ea-ab4f-4e1d-f576-bc48e43452cb"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With 10 estimators:\n",
            "Accuracy: 77.634961%\n",
            "With 20 estimators:\n",
            "Accuracy: 77.634961%\n",
            "With 30 estimators:\n",
            "Accuracy: 79.948586%\n",
            "With 40 estimators:\n",
            "Accuracy: 79.691517%\n",
            "With 50 estimators:\n",
            "Accuracy: 81.748072%\n",
            "With 60 estimators:\n",
            "Accuracy: 82.519280%\n",
            "With 70 estimators:\n",
            "Accuracy: 82.262211%\n",
            "With 80 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 90 estimators:\n",
            "Accuracy: 83.033419%\n",
            "With 100 estimators:\n",
            "Accuracy: 82.262211%\n",
            "With 110 estimators:\n",
            "Accuracy: 83.547558%\n",
            "With 120 estimators:\n",
            "Accuracy: 83.290488%\n",
            "With 130 estimators:\n",
            "Accuracy: 83.290488%\n",
            "With 140 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 150 estimators:\n",
            "Accuracy: 83.033419%\n",
            "With 160 estimators:\n",
            "Accuracy: 82.776350%\n",
            "With 170 estimators:\n",
            "Accuracy: 82.519280%\n",
            "With 180 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 190 estimators:\n",
            "Accuracy: 82.005141%\n",
            "With 200 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 210 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 220 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 230 estimators:\n",
            "Accuracy: 82.776350%\n",
            "With 240 estimators:\n",
            "Accuracy: 84.318766%\n",
            "With 250 estimators:\n",
            "Accuracy: 82.776350%\n",
            "With 260 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 270 estimators:\n",
            "Accuracy: 83.290488%\n",
            "With 280 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 290 estimators:\n",
            "Accuracy: 83.804627%\n",
            "With 300 estimators:\n",
            "Accuracy: 83.547558%\n",
            "With 310 estimators:\n",
            "Accuracy: 83.547558%\n",
            "With 320 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 330 estimators:\n",
            "Accuracy: 83.547558%\n",
            "With 340 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 350 estimators:\n",
            "Accuracy: 83.547558%\n",
            "With 360 estimators:\n",
            "Accuracy: 84.061697%\n",
            "With 370 estimators:\n",
            "Accuracy: 83.290488%\n",
            "With 380 estimators:\n",
            "Accuracy: 82.776350%\n",
            "With 390 estimators:\n",
            "Accuracy: 83.804627%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost\n",
        "xgb_clf = xgboost.XGBClassifier(learning_rate=0.3,\n",
        "    n_estimators=20,\n",
        "    seed=20,\n",
        "    verbosity=1\n",
        ")\n",
        "xgb_clf.fit(train_features, train_target)\n",
        "# from sklearn.metrics import brier_score_loss as BS\n",
        "# y_true = test_target\n",
        "# y_pred = xgb_clf.predict(test_features)\n",
        "# BS(y_true,y_pred)\n",
        "\n",
        "xgboost_version = xgboost.__version__\n",
        "print(xgboost_version)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xtosfP3vCTKk",
        "outputId": "5f6525ef-9376-471f-e3f5-f38fca867eda"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "TTPY1yLPA4VF"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        ">>> y_true = test_target\n",
        ">>> y_pred = xgb_clf.predict(test_features)\n",
        ">>> target_names = ['RCT', 'none']\n",
        ">>> print(classification_report(y_true, y_pred, target_names=target_names))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tdJEjB1BDfkP",
        "outputId": "894113ef-011b-40ea-ee04-94d26f6f6b75"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         RCT       0.86      0.95      0.90       302\n",
            "        none       0.71      0.46      0.56        87\n",
            "\n",
            "    accuracy                           0.84       389\n",
            "   macro avg       0.79      0.70      0.73       389\n",
            "weighted avg       0.83      0.84      0.82       389\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# !pip install shap\n",
        "# import shap\n",
        "# import numpy\n",
        "# import sklearn\n"
      ],
      "metadata": {
        "id": "ZPjAiDD5ENsn"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # Create object that can calculate shap values\n",
        "# explainer = shap.TreeExplainer(xgb_clf)\n",
        "# # Calculate Shap values\n",
        "# shap_values = explainer.shap_values(train_features)"
      ],
      "metadata": {
        "id": "GQqz1gIcEgFW"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# shap_sum = np.abs(shap_values).mean(axis=0)\n",
        "# importance_df = pd.DataFrame([train_features.columns.tolist(), shap_sum.tolist()]).T\n",
        "# importance_df.columns = ['column_name', 'shap_importance']\n",
        "# importance_df = importance_df.sort_values('shap_importance', ascending=False)\n",
        "# importance_df"
      ],
      "metadata": {
        "id": "1qPk3ydrEjYX"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# shap.summary_plot(shap_values,train_features,plot_type=\"bar\",show = False)\n",
        "# myfig = plt.gcf()\n",
        "# myfig.savefig('./figure1.tiff',bbox_inches='tight',dpi=300) "
      ],
      "metadata": {
        "id": "VTuA8pwKEp71"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# shap.summary_plot(shap_values, train_features, feature_names=train_features.columns,show = False)\n",
        "\n",
        "# myfig = plt.gcf()\n",
        "# myfig.savefig('./figure2.tiff',bbox_inches='tight',dpi=600) "
      ],
      "metadata": {
        "id": "T95EdyUdEsm4"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from sklearn.metrics import plot_roc_curve\n",
        "# import matplotlib.pylab as plt\n",
        "# f1_disp = plot_roc_curve(clf, test_features, test_target)\n",
        "# f2_disp = plot_roc_curve(stk_clf, test_features, test_target,ax =f1_disp.ax_)\n",
        "# f3_disp = plot_roc_curve(bag_clf, test_features, test_target,ax =f2_disp.ax_)\n",
        "# f4_disp = plot_roc_curve(ada_clf, test_features, test_target,ax =f3_disp.ax_)\n",
        "# f5_disp = plot_roc_curve(gra_clf, test_features, test_target,ax =f4_disp.ax_)\n",
        "# f6_disp = plot_roc_curve(rfc_clf, test_features, test_target,ax =f5_disp.ax_)\n",
        "# f7_disp = plot_roc_curve(xgb_clf, test_features, test_target,ax =f6_disp.ax_)\n",
        "# f7_disp.figure_.suptitle(\"ROC curve comparison\")\n",
        "# myfig = plt.gcf()\n",
        "# myfig.savefig('./figure3.tiff',dpi=300) \n",
        "# plt.show()"
      ],
      "metadata": {
        "id": "ceM8hGRgE75x"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from sklearn.metrics import plot_confusion_matrix, plot_roc_curve\n",
        "\n",
        "# plot_confusion_matrix(xgb_clf, test_features, test_target)\n",
        "\n",
        "# plot_roc_curve(xgb_clf, test_features, test_target)\n"
      ],
      "metadata": {
        "id": "kUMNgHUTE9Uc"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import pickle\n",
        "# pickle.dump(xgb_clf,open(\"final_model.p\",\"wb\"))\n",
        "import pickle\n",
        "model_ = open(\"final_model.p\",\"wb\")\n",
        "pickle.dump(xgb_clf,model_)\n",
        "model_.close()\n",
        "\n"
      ],
      "metadata": {
        "id": "GKaXvK8EFSem"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "oGTxdFixTzj4"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn\n",
        "sklearn_version =sklearn.__version__\n",
        "print(sklearn_version)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZAbdqzFoFPCx",
        "outputId": "1045ee8b-ad10-4639-bf0f-0708b5a14914"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit\n",
        "!pip install pyngrok===4.1.1\n",
        "\n",
        "from pyngrok import ngrok"
      ],
      "metadata": {
        "id": "9JUMaN1jFtzL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile diagnosis-rct-app.py\n",
        "import streamlit as st\n",
        "import base64\n",
        "import sklearn\n",
        "import numpy as np\n",
        "import pickle as pkl\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scal=MinMaxScaler()\n",
        "#Load the saved model\n",
        "model=pkl.load(open(\"final_model.p\",\"rb\"))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "st.set_page_config(page_title=\"rct App\",page_icon=\"⚕️\",layout=\"centered\",initial_sidebar_state=\"expanded\")\n",
        "\n",
        "\n",
        "\n",
        "def preprocess(sex,age,side,trauma,jobe,bear,belly,erls,ss,IS,ssc,ases,const,ucla,flex,abd,er,ir,vas,time ):   \n",
        " \n",
        "    \n",
        "    # Pre-processing user input   \n",
        "    if sex==\"male\":\n",
        "        sex=0\n",
        "    else: sex=1\n",
        "    \n",
        "    #age\n",
        "        \n",
        "    if side==\"Yes\":\n",
        "        side=1 \n",
        "    else: side=0\n",
        "        \n",
        "    if vas==\"0-4\":\n",
        "        vas=0\n",
        "    elif vas == \"5-7\"：\n",
        "        vas=1\n",
        "    else：vas=2\n",
        "    \n",
        "    if time==\"0-3\":\n",
        "        time=0\n",
        "    elif time == \"3-6\"：\n",
        "        time=1\n",
        "    elif time == \"6-12\"：\n",
        "        time=2\n",
        "    else：time = 3\n",
        "        \n",
        "    if trauma==\"Yes\":\n",
        "        trauma=1 \n",
        "    else: trauma=0\n",
        "        \n",
        "    if flex==\"0-45\":\n",
        "        flex=0\n",
        "    elif flex == \"45-90\"：\n",
        "        flex=1\n",
        "    elif flex == \"90-135\"：\n",
        "        flex=2\n",
        "    else：flex = 3\n",
        "        \n",
        "    if abd==\"0-45\":\n",
        "        abd=0\n",
        "    elif abd == \"45-90\"：\n",
        "        abd=1\n",
        "    elif abd == \"90-135\"：\n",
        "        abd=2\n",
        "    else：abd = 3\n",
        "        \n",
        "    if er==\"0-20\":\n",
        "        er=0\n",
        "    elif er == \"20-40\"：\n",
        "        er=1\n",
        "    elif er == \"40-60\"：\n",
        "        er=2\n",
        "    else：er = 3\n",
        "        \n",
        "    if ir==\"below S1\":\n",
        "        ir=0\n",
        "    elif ir == \"L1-L5\"：\n",
        "        ir=1\n",
        "    else：ir = 2\n",
        "    \n",
        "    if jobe==\"+\":\n",
        "        jobe=1 \n",
        "    else: jobe=0\n",
        "        \n",
        "    if bear==\"+\":\n",
        "        bear=1 \n",
        "    else: bear= 0\n",
        "        \n",
        "    if belly==\"+\":\n",
        "        belly=1 \n",
        "    else: belly= 0\n",
        "    \n",
        "    if erls==\"+\":\n",
        "        erls=1 \n",
        "    else: erls= 0\n",
        "        \n",
        "    # ss is ssc ases const ucla\n",
        "    \n",
        "    \n",
        "    \n",
        "\n",
        "    user_input=[sex,age,side,trauma,jobe,bear,belly,erls,ss,IS,ssc,ases,const,ucla,flex,abd,er,ir,vas,time ]\n",
        "    user_input=np.array(user_input)\n",
        "    user_input=user_input.reshape(1,-1)\n",
        "    user_input=scal.fit_transform(user_input)\n",
        "    prediction = model.predict(user_input)\n",
        "\n",
        "    return prediction\n",
        "\n",
        "    \n",
        "\n",
        "       \n",
        "    # front end elements of the web page \n",
        "html_temp = \"\"\" \n",
        "    <div style =\"background-color:pink;padding:13px\"> \n",
        "    <h1 style =\"color:black;text-align:center;\">Healthy Heart App</h1> \n",
        "    </div> \n",
        "    \"\"\"\n",
        "      \n",
        "# display the front end aspect\n",
        "st.markdown(html_temp, unsafe_allow_html = True) \n",
        "st.subheader('by Amlan Mohanty ')\n",
        "      \n",
        "# following lines create boxes in which user can enter data required to make prediction\n",
        "age=st.selectbox (\"Age\",range(1,121,1))\n",
        "sex = st.radio(\"Select Gender: \", ('male', 'female'))\n",
        "side=st.radio(\"is the painful shoulder your dominant side?\", ['Yes','No'])\n",
        "trauma=st.radio(\"have you get injuried in your shoulder?\", ['Yes','No'])\n",
        "jobe=st.radio(\"JOBE test\", ['+','-'])\n",
        "bear=st.radio(\"BEAR HUG\", ['+','-'])\n",
        "belly=st.radio(\"BELLY PRESS\", ['+','-'])\n",
        "erls=st.radio(\"ERLS\", ['+','-'])\n",
        "ss=st.selectbox('the strength of supraspinatus ',range(0,5,1))\n",
        "IS=st.selectbox('the strength of infraspinatus',range(0,5,1)) \n",
        "ssc=st.selectbox('the strength of subscapularis ',range(0,5,1))\n",
        "ases=st.selectbox (\"ASES\",range(1,100,1))\n",
        "const=st.selectbox (\"Constant-Murley\",range(1,100,1))\n",
        "ucla=st.selectbox (\"UCLA\",range(1,100,1))\n",
        "vas,time \n",
        "flex=st.selectbox('Flexion',(\"0-45°\",\"45-90°\",\"90-135°\",\"135-180°\"))\n",
        "abd=st.selectbox('Abduction',(\"0-45°\",\"45-90°\",\"90-135°\",\"135-180°\"))\n",
        "er=st.selectbox('External rotation',(\"0-20°\",\"20-40°\",\"40-60°\",\"60-80°\"))\n",
        "ir=st.selectbox('Internal rotation',(\"below S1\",\"L1-L5\",\"above T12\"))\n",
        "vas=st.selectbox('VAS',(\"0-4\",\"5-7\",\"8-10°\"))\n",
        "time=st.selectbox('Duration of symptoms/months',(\"<3\",\"3-6\",\"6-12\",\">12\"))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# cp = st.selectbox('Chest Pain Type',(\"Typical angina\",\"Atypical angina\",\"Non-anginal pain\",\"Asymptomatic\")) \n",
        "# trestbps=st.selectbox('Resting Blood Sugar',range(1,500,1))\n",
        "# restecg=st.selectbox('Resting Electrocardiographic Results',(\"Nothing to note\",\"ST-T Wave abnormality\",\"Possible or definite left ventricular hypertrophy\"))\n",
        "# chol=st.selectbox('Serum Cholestoral in mg/dl',range(1,1000,1))\n",
        "# fbs=st.radio(\"Fasting Blood Sugar higher than 120 mg/dl\", ['Yes','No'])\n",
        "# thalach=st.selectbox('Maximum Heart Rate Achieved',range(1,300,1))\n",
        "# exang=st.selectbox('Exercise Induced Angina',[\"Yes\",\"No\"])\n",
        "# oldpeak=st.number_input('Oldpeak')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#user_input=preprocess(sex,cp,exang, fbs, slope, thal )\n",
        "pred=preprocess(sex,age,side,trauma,jobe,bear,belly,erls,ss,IS,ssc,ases,const,ucla,flex,abd,er,ir,vas,time)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "if st.button(\"Predict\"):    \n",
        " if pred[0] == 0:\n",
        "    st.error('Warning! You have high risk of getting a rct!')\n",
        "    \n",
        " else:\n",
        "    st.success('You have lower risk of getting a rct!')\n",
        "    \n",
        "   \n",
        "\n",
        "st.sidebar.subheader(\"About App\")\n",
        "\n",
        "st.sidebar.info(\"This web app is helps you to find out whether you are at a risk of developing a RCT.\")\n",
        "st.sidebar.info(\"Enter the required fields and click on the 'Predict' button to check whether you have a healthy shoulder\")\n",
        "st.sidebar.info(\"Don't forget to rate this app\")\n",
        "\n",
        "\n",
        "\n",
        "feedback = st.sidebar.slider('How much would you rate this app?',min_value=0,max_value=5,step=1)\n",
        "\n",
        "if feedback:\n",
        "  st.header(\"Thank you for rating the app!\")\n",
        "  st.info(\"Caution: This is just a prediction and not doctoral advice. Kindly see a doctor if you feel the symptoms persist.\") "
      ],
      "metadata": {
        "id": "AtiO8nd_F9XW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!nohup streamlit run healthy-heart-app.py &\n",
        "url = ngrok.connect(port='8501')\n",
        "url"
      ],
      "metadata": {
        "id": "vTcdIhhUGBJz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "_7NHrfAAAyoE"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}